{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["window","proj4","mapOptions","chart","map","title","text","credits","enabled","mapNavigation","buttonOptions","verticalAlign","colorAxis","min","series","mapData","mapDataCU","data","name","states","hover","color","dataLabels","format","highchartsMap","Highcharts","App","className","constructorType","highcharts","options","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qSAOsB,qBAAXA,SACTA,OAAOC,MAAQD,OAAOC,OAASA,KAGjC,IAoBMC,EAAa,CACjBC,MAAO,CACLC,IAAK,uBAEPC,MAAO,CACLC,KAAM,YAERC,QAAS,CACLC,SAAS,GAEbC,cAAe,CACbD,SAAS,EACTE,cAAe,CACXC,cAAe,WAIrBC,UAAW,CACPC,IAAK,GAMTC,OAAQ,CAAC,CACPC,QAASC,EACTC,KA9CO,CACT,CAAC,QAAS,GACV,CAAC,QAAS,GACV,CAAC,QAAS,GACV,CAAC,QAAS,GACV,CAAC,UAAW,GACZ,CAAC,QAAS,GACV,CAAC,QAAS,GACV,CAAC,QAAS,GACV,CAAC,QAAS,GACV,CAAC,QAAS,GACV,CAAC,QAAS,IACV,CAAC,QAAS,IACV,CAAC,QAAS,IACV,CAAC,QAAS,IACV,CAAC,QAAS,IACV,CAAC,QAAS,IACV,CAAC,QAAS,KA8BRC,KAAM,cACNC,OAAQ,CACJC,MAAO,CACHC,MAAO,YAGfC,WAAY,CACRd,SAAS,EACTe,OAAQ,mBAKhBC,IAAcC,KAcCC,MAZf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,IAAD,CACEC,gBAAkB,WAClBC,WAAYJ,IACZK,QAAS5B,OCnEF6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,cAM1Bb,M","file":"static/js/main.b58baba9.chunk.js","sourcesContent":["import './App.css';\nimport Highcharts from 'highcharts/highstock'\nimport HighchartsReact from 'highcharts-react-official'\nimport highchartsMap from \"highcharts/modules/map\"\nimport proj4 from \"proj4\";\nimport mapDataCU from \"@highcharts/map-collection/countries/cu/cu-all.geo.json\";\n\nif (typeof window !== \"undefined\") {\n  window.proj4 = window.proj4 || proj4;\n}\n\nlet data = [\n  ['cu-ho', 0],\n  ['cu-ar', 1],\n  ['cu-ma', 2],\n  ['cu-vc', 3],\n  ['cu-5812', 4],\n  ['cu-ij', 5],\n  ['cu-ss', 6],\n  ['cu-ca', 7],\n  ['cu-cm', 8],\n  ['cu-ch', 9],\n  ['cu-cf', 10],\n  ['cu-gu', 11],\n  ['cu-gr', 12],\n  ['cu-lt', 13],\n  ['cu-sc', 14],\n  ['cu-mq', 15],\n  ['cu-pr', 16]\n];\n\nconst mapOptions = {\n  chart: {\n    map: 'countries/cu/cu-all'\n  },\n  title: {\n    text: 'Map Demo'\n  },\n  credits: {\n      enabled: false\n  },\n  mapNavigation: {\n    enabled: true,\n    buttonOptions: {\n        verticalAlign: 'bottom'\n    }\n  },\n\n  colorAxis: {\n      min: 0\n  },\n  // tooltip: {\n  //   headerFormat: '',\n  //   pointFormat: '<b>{point.freq}</b><br><b>{point.keyword}</b>                      <br>lat: {point.lat}, lon: {point.lon}'\n  // },\n  series: [{\n    mapData: mapDataCU,\n    data: data,\n    name: 'Random data',\n    states: {\n        hover: {\n            color: '#BADA55'\n        }\n    },\n    dataLabels: {\n        enabled: true,\n        format: '{point.name}'\n    }\n  }]\n}\n\nhighchartsMap(Highcharts);\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HighchartsReact\n        constructorType ={'mapChart'}\n        highcharts={Highcharts}\n        options={mapOptions}\n      />     \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('react-app')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}